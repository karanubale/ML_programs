# -*- coding: utf-8 -*-
"""ML_EXP1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrRMdvpNJ_sJ5zDdwWfBEq1iIuzJbAGS
"""

from google.colab import files


uploaded = files.upload()

import pandas as pd
import io

df = pd.read_csv(io.BytesIO(uploaded['Credit Card Fraud.csv']))
print(df)

df.head()

df.tail()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Credit Card Fraud.csv')

df.plot()

plt.show()

df.plot(kind = 'scatter', x = 'credit_usage', y = 'current_balance')

plt.show()

#import pandas
import pandas as pd

# read csv file
df = pd.read_csv('Credit Card Fraud.csv')

# replacing values
df['other_parties'].replace(['none', 'guarantor'],
                        [0, 1], inplace=True)
df.head()
df.tail()

df['class'].unique()

df.describe()

df["class"].dropna()

from google.colab import file
uploaded = files.upload()

import pandas as pd

# load dataset
fraud_df = pd.read_csv("creditcard.csv")
print(f"Dataset Shape :- \n {fraud_df.shape}")

fraud_df.head()

fraud_df.describe()

print(f"Columns or Feature names :- \n {fraud_df.columns}")

print(f"Unique values of target variable :- \n {fraud_df['Class'].unique()}")

fraud_df.dropna()

print(f"Number of samples under each target value :- \n {fraud_df['Class'].value_counts()}")


print(f"Dataset info :- \n {fraud_df.info()}")

fraud_df.dropna()
X = fraud_df.drop(['Class'], axis=1)
y = fraud_df[['Class']]
# splitting dataset to train & test dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(X_train, y_train)

predTrain = nb.predict(X_train)
from sklearn.metrics import classification_report
print(classification_report(y_train, predTrain))
from sklearn.metrics import roc_auc_score as roc
print('ROC AUC Score: ',roc(y_train, predTrain))